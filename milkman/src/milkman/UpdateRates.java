/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package milkman;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Rakesh
 */
public class UpdateRates extends javax.swing.JInternalFrame {

    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    String reporttodispalay;
    Connection conn;
    String qry = "";
    int[] sanghid;
    int[] prodgrid;
    int[] rateid;
    
    private Date date = new Date();
    SimpleDateFormat mdy = new SimpleDateFormat("MM/dd/yyyy");
    SimpleDateFormat dm = new SimpleDateFormat("dd/MM");
    SimpleDateFormat dmy = new SimpleDateFormat("dd/MM/yyyy");
    DecimalFormat df = new DecimalFormat("#.00");
    DecimalFormat onedf = new DecimalFormat("#.#");
    DecimalFormat twodf = new DecimalFormat("#0.##");
    
    public UpdateRates() {
        try {
            initComponents();
            try {
                if(conn!=null){
                    conn.close();
                }
                conn = methods.getConnection();
            } catch (SQLException ex) {
                Logger.getLogger(displayreportdatecriteria.class.getName()).log(Level.SEVERE, null, ex);
            }
            dtpfromdate.setDate(date);  
            dtptodate.setDate(date);
            ResultSet rscombo;
            //String qry;
            qry = "SELECT producergroup.ID, producergroup.grname FROM producergroup ORDER BY producergroup.ID;";
            PreparedStatement ratechartid = conn.prepareStatement(qry);
            rscombo = ratechartid.executeQuery();
            prodgrid = new int[30];
            int i = 0;
            while(rscombo.next()) {
                cmbprodgroup.insertItemAt(rscombo.getString("grname"), i);
                prodgrid[i] = rscombo.getInt("ID");
                i++;
            }
            cmbsangh.setEnabled(true);
            chkall.setSelected(true);
            rscombo.close();
            
            // rate chart number
            qry = "SELECT rateChart.rtc_no " +
                    "FROM rateChart " +
                    "GROUP BY rateChart.rtc_no;";
            PreparedStatement ratechartid1 = conn.prepareStatement(qry);
            ResultSet rscombo1 = ratechartid1.executeQuery();
            rateid = new int[10];
            i = 1;
            cmbDuplicateRateChartNumber.insertItemAt("As per set", 0);
            while(rscombo1.next()) {
               cmbDuplicateRateChartNumber.insertItemAt(rscombo1.getString("rtc_no"), i);
               //rateid[i] = rscombo.getInt("rtc_no");
               i++;
            }
            rscombo1.close();
            
            cmbDuplicateRateChartNumber.setSelectedIndex(0);
            
            cmbprodgroup.setSelectedIndex(0);
            
        } catch (SQLException ex) {
            Logger.getLogger(UpdateRates.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        dtpfromdate = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        dtptodate = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cmbprodgroup = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbsangh = new javax.swing.JComboBox();
        chkall = new javax.swing.JCheckBox();
        lblRateChartNumber = new javax.swing.JLabel();
        cmbDuplicateRateChartNumber = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setClosable(true);
        setTitle("Update Rates");

        jPanel2.setBackground(new java.awt.Color(113, 168, 168));

        jButton1.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jButton1.setText("रिपोर्ट बघणे");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jButton2.setText("बाहेर");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("तारखे पासून :");

        dtpfromdate.setFocusable(false);
        dtpfromdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel8.setText("ते");

        dtptodate.setFocusable(false);
        dtptodate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("उत्पादक ग्रुप :");

        cmbprodgroup.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        cmbprodgroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbprodgroupActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("उत्पादक :");

        cmbsangh.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        cmbsangh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbsanghActionPerformed(evt);
            }
        });

        chkall.setBackground(new java.awt.Color(255, 255, 255));
        chkall.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        chkall.setText("सर्व");

        lblRateChartNumber.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        lblRateChartNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRateChartNumber.setText("Select Rate Chart :");

        cmbDuplicateRateChartNumber.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        cmbDuplicateRateChartNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDuplicateRateChartNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dtpfromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(dtptodate, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbprodgroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkall, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRateChartNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbDuplicateRateChartNumber, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(cmbsangh, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtpfromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(dtptodate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbprodgroup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbsangh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkall)
                    .addComponent(lblRateChartNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbDuplicateRateChartNumber))
                .addGap(42, 42, 42)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        int prod_id, ratechartno = 1;
        ResultSet rs;
        String qry = "";
        
        if (JOptionPane.showConfirmDialog(null, "Are you sure? You want to update rates.", "Milkman", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return;
        }
        
        if (chkall.isSelected()) {
            // For all producers in selected group
            for (int i = 0; i < cmbsangh.getItemCount(); i++) { 
                try {
                    // Producer Loop
                    prod_id = sanghid[i];

                    if (cmbDuplicateRateChartNumber.getSelectedIndex() == 0) {
                        // Update rates as rate chart set
                        // Get the rate chart number of selected producer
                        qry = "SELECT producer.rtc_no FROM producer WHERE (((producer.prod_id)="+ prod_id +"));";
                        PreparedStatement stmt = conn.prepareStatement(qry);
                        rs = stmt.executeQuery();
                        while(rs.next()) {
                            ratechartno = rs.getInt("rtc_no");
                        }
                        rs.close();
                    } else {
                        ratechartno = Integer.parseInt((String) cmbDuplicateRateChartNumber.getSelectedItem());
                    }                         
                    
                    // GET THE COLLECTION DETAIL
                    qry = "SELECT mlkCollection.ID, "
                            + "mlkCollection.fat, "
                            + "mlkCollection.degree, "
                            + "mlkCollection.snf FROM mlkCollection "
                            + "WHERE (((mlkCollection.trn_date)>=#"+mdy.format(dtpfromdate.getDate())+"# And "
                            + "(mlkCollection.trn_date)<=#"+mdy.format(dtptodate.getDate())+"#) AND "
                            + "((mlkCollection.prod_id)="+prod_id+")) ORDER BY mlkCollection.ID;";
                    PreparedStatement getCollectionRecord;
                    getCollectionRecord = conn.prepareStatement(qry);                
                    try (ResultSet rsCollectionRecord = getCollectionRecord.executeQuery()) {
                        while(rsCollectionRecord.next()) {
                            double UpdateRate = 0;
                            qry = "SELECT rateChart.rate FROM rateChart "
                                    + "WHERE (((rateChart.rtc_no)=" + ratechartno + ") AND "
                                    + "((rateChart.fat)="+rsCollectionRecord.getString("fat")+") AND "
                                    + "((rateChart.snf)="+rsCollectionRecord.getString("snf")+"));";
                            PreparedStatement getUpdateRate = conn.prepareStatement(qry);
                            try(ResultSet rsUpdateRate = getUpdateRate.executeQuery()) {
                                while (rsUpdateRate.next()) {
                                    UpdateRate = rsUpdateRate.getDouble("rate");
                                }
                            }

                            qry = "UPDATE mlkCollection SET mlkCollection.rate = "+ twodf.format(UpdateRate) +" WHERE (((mlkCollection.ID)="+rsCollectionRecord.getInt("ID")+"));";
                            conn.prepareStatement(qry).execute();
                        }
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(UpdateRates.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        } else {
            // For selected producer in selected group
            try {
                // Producer Loop
                prod_id = sanghid[cmbsangh.getSelectedIndex()];

                if (cmbDuplicateRateChartNumber.getSelectedIndex() == 0) {
                    // Update rates as rate chart set
                    // Get the rate chart number of selected producer
                    qry = "SELECT producer.rtc_no FROM producer WHERE (((producer.prod_id)="+ prod_id +"));";
                    PreparedStatement stmt = conn.prepareStatement(qry);
                    rs = stmt.executeQuery();
                    while(rs.next()) {
                        ratechartno = rs.getInt("rtc_no");
                    }
                    rs.close();
                } else {
                    ratechartno = Integer.parseInt((String) cmbDuplicateRateChartNumber.getSelectedItem());
                }                         

                // GET THE COLLECTION DETAIL
                qry = "SELECT mlkCollection.ID, "
                        + "mlkCollection.fat, "
                        + "mlkCollection.degree, "
                        + "mlkCollection.snf FROM mlkCollection "
                        + "WHERE (((mlkCollection.trn_date)>=#"+mdy.format(dtpfromdate.getDate())+"# And "
                        + "(mlkCollection.trn_date)<=#"+mdy.format(dtptodate.getDate())+"#) AND "
                        + "((mlkCollection.prod_id)="+prod_id+")) ORDER BY mlkCollection.ID;";
                PreparedStatement getCollectionRecord;
                getCollectionRecord = conn.prepareStatement(qry);                
                try (ResultSet rsCollectionRecord = getCollectionRecord.executeQuery()) {
                    while(rsCollectionRecord.next()) {
                        double UpdateRate = 0;
                        qry = "SELECT rateChart.rate FROM rateChart "
                                + "WHERE (((rateChart.rtc_no)=" + ratechartno + ") AND "
                                + "((rateChart.fat)="+rsCollectionRecord.getString("fat")+") AND "
                                + "((rateChart.snf)="+rsCollectionRecord.getString("snf")+"));";
                        PreparedStatement getUpdateRate = conn.prepareStatement(qry);
                        try(ResultSet rsUpdateRate = getUpdateRate.executeQuery()) {
                            while (rsUpdateRate.next()) {
                                UpdateRate = rsUpdateRate.getDouble("rate");
                            }
                        }

                        qry = "UPDATE mlkCollection SET mlkCollection.rate = "+ twodf.format(UpdateRate) +" WHERE (((mlkCollection.ID)="+rsCollectionRecord.getInt("ID")+"));";
                        conn.prepareStatement(qry).execute();
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(UpdateRates.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        if (conn!=null) {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(displayreportdatecriteria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbprodgroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbprodgroupActionPerformed
            try {
                cmbsangh.removeAllItems();
                //jLabel7.setText("उत्पादक :");
                ResultSet rscombo;

                qry = "SELECT producer.prod_id, [producer]![ID] & ' - ' & [producer]![pro_name] AS Expr1," +
                " producer.producergroupid FROM producer" +
                " WHERE (((producer.producergroupid)="+prodgrid[cmbprodgroup.getSelectedIndex()]+"))" +
                " ORDER BY producer.ID;";
                //System.out.println(qry);
                PreparedStatement ratechartid = conn.prepareStatement(qry);
                rscombo = ratechartid.executeQuery();
                sanghid = new int[10000];
                int i = 0;
                while(rscombo.next()) {
                    cmbsangh.insertItemAt(rscombo.getString("Expr1"), i);
                    sanghid[i] = rscombo.getInt("prod_id");
                    i++;
                }
                if (i!=0) { cmbsangh.setSelectedIndex(0); }
                rscombo.close();
            } catch (SQLException ex) {
                Logger.getLogger(displayreportdatecriteria.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_cmbprodgroupActionPerformed

    private void cmbsanghActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbsanghActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbsanghActionPerformed

    private void cmbDuplicateRateChartNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDuplicateRateChartNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDuplicateRateChartNumberActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkall;
    private javax.swing.JComboBox cmbDuplicateRateChartNumber;
    private javax.swing.JComboBox cmbprodgroup;
    private javax.swing.JComboBox cmbsangh;
    private com.toedter.calendar.JDateChooser dtpfromdate;
    private com.toedter.calendar.JDateChooser dtptodate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblRateChartNumber;
    // End of variables declaration//GEN-END:variables
}
