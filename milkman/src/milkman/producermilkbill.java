/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package milkman;

import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rakesh
 */
public class producermilkbill extends javax.swing.JInternalFrame {

    /**
     * Creates new form producermilkbill
     */
    private Date date = new Date();
    SimpleDateFormat mdy = new SimpleDateFormat("MM/dd/yyyy");
    SimpleDateFormat dmy = new SimpleDateFormat("dd/MM/yyyy");
    DecimalFormat onedf = new DecimalFormat("#.#");
    DecimalFormat twodf = new DecimalFormat("#0.##");
    Connection conn;
    PreparedStatement SHIFT_REPORT = null;
    String qry = "";
    private DefaultTableModel dtm;    
    private int[] grid;
    
    public producermilkbill() {
        try {
            initComponents();
            if(conn!=null){
                conn.close();
            }
            conn = methods.getConnection();

            dtpfromdate.setDate(date);        
            dtptodate.setDate(date);        
            
////            String colheader[] = {"उ. कोड", "उत्पादकाचे नाव", "एकूण दुध", "फॅट", "दर", "रक्कम", "अतिरिक्त", "कपात", "देयक रक्कम"};
////            
////            dtm = new DefaultTableModel(colheader, 50000);                    
////            table_bill.setModel(dtm);
////
////            table_bill.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
////            {
////                @Override
////                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
////                {
////                    final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
////                    c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);
////                    return c;
////                }
////            }); 
////            
////            (table_bill.getColumnModel().getColumn(0)).setPreferredWidth(45);
////            (table_bill.getColumnModel().getColumn(1)).setPreferredWidth(250);
//            (table_bill.getColumnModel().getColumn(2)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(3)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(4)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(5)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(6)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(7)).setPreferredWidth(100);
//            (table_bill.getColumnModel().getColumn(8)).setPreferredWidth(100);
            
            grid = new int[30];
            cmbgroup.insertItemAt("सर्व", 0);
            grid[0] = 0;
            qry = "SELECT producergroup.ID, producergroup.grname\n" +
                    "FROM producergroup\n" +
                    "ORDER BY producergroup.ID;";
            PreparedStatement loadqry;            
            loadqry = conn.prepareStatement(qry);
            ResultSet rscombo;
            int i = 1;
            rscombo = loadqry.executeQuery();
            while(rscombo.next()) {
                int gid = rscombo.getInt("ID");
                cmbgroup.insertItemAt(rscombo.getString("grname"), i);
                grid[i] = gid;
                i++;
            }
            cmbgroup.setSelectedIndex(0);
            rscombo.close();
            loadqry.close();
            
            getbillreport();
            
        } catch (SQLException ex) {
            Logger.getLogger(producermilkbill.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dtpfromdate = new com.toedter.calendar.JDateChooser();
        dtptodate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        btngeneratebill = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        txttotalmilk = new javax.swing.JFormattedTextField();
        txttotalmilkamt = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        txttotdeduction = new javax.swing.JFormattedTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        txtamtpayable = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbgroup = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_bill = new javax.swing.JTable();
        btnrefresh = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btnprint1 = new javax.swing.JButton();
        btnrefresh1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setTitle("उत्पादक दुध बिल ");

        jPanel1.setBackground(new java.awt.Color(113, 168, 168));

        jLabel5.setFont(new java.awt.Font("Mangal", 1, 24)); // NOI18N
        jLabel5.setText("उत्पादक दुध बिल");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel1.setText("दिनांक पासून :");

        dtpfromdate.setFocusable(false);
        dtpfromdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        dtpfromdate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpfromdatePropertyChange(evt);
            }
        });

        dtptodate.setFocusable(false);
        dtptodate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        dtptodate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtptodatePropertyChange(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel2.setText("ग्रुप :");

        btngeneratebill.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        btngeneratebill.setText("बिल बघणे");
        btngeneratebill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btngeneratebillActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(113, 168, 168));

        jLabel25.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel25.setText("ए. दुध :");

        txttotalmilk.setForeground(new java.awt.Color(51, 51, 255));
        txttotalmilk.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txttotalmilk.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txttotalmilk.setFocusable(false);
        txttotalmilk.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N

        txttotalmilkamt.setForeground(new java.awt.Color(51, 51, 255));
        txttotalmilkamt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txttotalmilkamt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txttotalmilkamt.setFocusable(false);
        txttotalmilkamt.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N

        jLabel26.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel26.setText("ए. दुध रक्कम :");

        txttotdeduction.setForeground(new java.awt.Color(51, 51, 255));
        txttotdeduction.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txttotdeduction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txttotdeduction.setFocusable(false);
        txttotdeduction.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N

        jLabel30.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel30.setText("ए. कपात :");

        jLabel31.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel31.setText("देयक रक्कम :");

        txtamtpayable.setForeground(new java.awt.Color(51, 51, 255));
        txtamtpayable.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtamtpayable.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtamtpayable.setFocusable(false);
        txtamtpayable.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txttotalmilk, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txttotalmilkamt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txttotdeduction, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtamtpayable, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotalmilk)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotalmilkamt)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotdeduction)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtamtpayable))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Mangal", 1, 18)); // NOI18N
        jLabel3.setText("दिनांक पर्यंत :");

        cmbgroup.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        cmbgroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbgroupActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        table_bill.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        table_bill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_bill.setRowHeight(24);
        table_bill.setSelectionForeground(new java.awt.Color(153, 0, 51));
        jScrollPane2.setViewportView(table_bill);

        btnrefresh.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        btnrefresh.setText("रेफ्रेश");
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });

        btnprint.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        btnprint.setText("प्रिंट");
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });

        btnprint1.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        btnprint1.setText("बाहेर");
        btnprint1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprint1ActionPerformed(evt);
            }
        });

        btnrefresh1.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        btnrefresh1.setText("डीलीट");
        btnrefresh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefresh1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dtpfromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtptodate, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btngeneratebill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnrefresh1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnprint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnprint1)
                        .addGap(12, 12, 12))
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbgroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btngeneratebill)
                        .addComponent(jLabel2)
                        .addComponent(btnrefresh)
                        .addComponent(btnprint)
                        .addComponent(btnprint1)
                        .addComponent(btnrefresh1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dtpfromdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dtptodate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getbillreport() {
        try {
            int r;
            int c;
            for(r=0; r<table_bill.getRowCount(); r++) {
                for (c=0; c<table_bill.getColumnCount(); c++) {
                    table_bill.setValueAt("", r, c);
                }
            }         
            
//            String q = "SELECT milkCollectionBill.prod_code, milkCollectionBill.prod_name,"+
//                    " milkCollectionBill.tot_milk, milkCollectionBill.avg_FAT, milkCollectionBill.avg_rate,"+
//                    " milkCollectionBill.tot_milkamount, [milkCollectionBill]![tot_commision]+[milkCollectionBill]![sourmlkamt]"+
//                    " AS Addition, [milkCollectionBill]![tot_sh_anamat]+[milkCollectionBill]![tot_ribet]+"+
//                    "[milkCollectionBill]![chiling_charges]+[milkCollectionBill]![travalingexp]+[milkCollectionBill]!"+
//                    "[pashukhadya]+[milkCollectionBill]![mlkbilladv]+[milkCollectionBill]![otherded]+[milkCollectionBill]!"+
//                    "[docfee] AS deduction, milkCollectionBill.amt_payable " +
//                    "FROM milkCollectionBill;";
            String q = "SELECT milkCollectionBill.prod_code, milkCollectionBill.prod_name, milkCollectionBill.tot_milk," +
                    " milkCollectionBill.avg_FAT, milkCollectionBill.avg_rate, milkCollectionBill.tot_milkamount,"+
                    "[milkCollectionBill]![tot_commision]+[milkCollectionBill]![sourmlkamt] AS Addition,"+
                    "[milkCollectionBill]![tot_sh_anamat]+[milkCollectionBill]![tot_ribet]+[milkCollectionBill]![chiling_charges]+[milkCollectionBill]![travalingexp]+[milkCollectionBill]![pashukhadya]+[milkCollectionBill]![mlkbilladv]+[milkCollectionBill]![otherded]+[milkCollectionBill]![docfee] AS deduction, milkCollectionBill.amt_payable, milkCollectionBill.from_date, milkCollectionBill.to_date " +
                    "FROM milkCollectionBill " +
                    "WHERE (((milkCollectionBill.from_date)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND"+
                    " ((milkCollectionBill.to_date)<=#"+mdy.format(dtptodate.getDate())+"#)) " +
                    "ORDER BY milkCollectionBill.prod_code;";
//            System.out.println(q);
            try (PreparedStatement Bill_REPORT = conn.prepareStatement(q, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                ResultSet rs;
                rs = Bill_REPORT.executeQuery();
                rs.last();
                int i=0;
                int j=0;
                int totalrecord = rs.getRow();
                System.out.println(totalrecord);
                String colheader[] = {"उ. कोड", "उत्पादकाचे नाव", "एकूण दुध", "फॅट", "दर", "रक्कम", "अतिरिक्त", "कपात", "देयक रक्कम"};

                dtm = new DefaultTableModel(colheader, totalrecord+1);                    
                table_bill.setModel(dtm);

                table_bill.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
                {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
                    {
                        final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                        c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);
                        return c;
                    }
                }); 

                (table_bill.getColumnModel().getColumn(0)).setPreferredWidth(45);
                (table_bill.getColumnModel().getColumn(1)).setPreferredWidth(250);
                rs.beforeFirst();
                while(rs.next()) {
                    for (j=0; j<table_bill.getColumnCount(); j++) {
                        table_bill.setValueAt(rs.getString(j+1), i, j);
                    }
                    i++;                    
                }
                rs.close();
            }
            
            q = "SELECT Sum(milkCollectionBill.tot_milk) AS SumOftot_milk,"+
                " Sum(milkCollectionBill.tot_milkamount) AS SumOftot_milkamount,"+
                " Sum([milkCollectionBill]![tot_sh_anamat]+[milkCollectionBill]![tot_ribet]+[milkCollectionBill]!"+
                "[chiling_charges]+[milkCollectionBill]![travalingexp]+[milkCollectionBill]!"+
                "[pashukhadya]+[milkCollectionBill]![mlkbilladv]+[milkCollectionBill]![otherded]+[milkCollectionBill]!"+
                "[docfee]) AS deduction, Sum(milkCollectionBill.amt_payable) AS SumOfamt_payable" +
                " FROM milkCollectionBill "+
                "WHERE (((milkCollectionBill.from_date)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND"+
                " ((milkCollectionBill.to_date)<=#"+mdy.format(dtptodate.getDate())+"#));";
            try (PreparedStatement gettotal = conn.prepareStatement(q)) {
                ResultSet rs_total;
                rs_total = gettotal.executeQuery();
                if(rs_total.next()) {
                    
                    txttotalmilk.setText(""+twodf.format(rs_total.getDouble("SumOftot_milk")));
                    txttotalmilkamt.setText(""+twodf.format(rs_total.getDouble("SumOftot_milkamount")));
                    txttotdeduction.setText(""+twodf.format(rs_total.getDouble("deduction")));
                    txtamtpayable.setText(""+twodf.format(rs_total.getDouble("SumOfamt_payable")));
                    
                } else {
                
                }
                rs_total.close();
            }
            
//            q = "SELECT max(milkCollectionBill.from_date) as from_date, max(milkCollectionBill.to_date) as to_date\n" +
//                "FROM milkCollectionBill\n" +
//                "GROUP BY milkCollectionBill.from_date, milkCollectionBill.to_date;";
//            try (PreparedStatement gettotal = conn.prepareStatement(q); ResultSet rs_total = gettotal.executeQuery()) {
//                if(rs_total.next()) {
//                
//                    dtpfromdate.setDate(rs_total.getDate("from_date"));
//                    dtptodate.setDate(rs_total.getDate("to_date"));
//                    
//                } else {
//                
//                }
//            }
            
        } catch (SQLException ex) {
            Logger.getLogger(deduction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    private void btngeneratebillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btngeneratebillActionPerformed

        int prod_id = 0;
        int prod_code = 0;
        String prod_name;
        double comm;
        double commission = 0;
        double totmilk = 0;
        double avg_fat = 0;
        double avg_snf = 0;
        double avg_rate = 0;
        double tot_amt = 0;
        double anamat_per = 0;      // per liter
        double rebate_per = 0;      // per liter
        double vehcharg_per = 0;    // per liter
        double chilcharg_per = 0;   // per liter
        double anamat = 0;      // per liter
        double rebate = 0;      // per liter
        double vehcharg = 0;    // per liter
        double chilcharg = 0;   // per liter
        double pashukhadya = 0;
        double milkbilladv = 0;
        double milkbilladvbal = 0;
        double Pashukhadyabal = 0;
        double docfee = 0;
        double otherded = 0;
        double totdeduction = 0;
        double amt_payable = 0;
        double saurmilkamt = 0;
        
        try {
            
            System.out.println(cmbgroup.getSelectedIndex());
            
            // Delete old bills for the selected bill period
            if (cmbgroup.getSelectedIndex()==0) {
                qry = "DELETE * FROM milkCollectionBill where from_date>=#"+mdy.format(dtpfromdate.getDate())+"# and to_date<=#"+mdy.format(dtptodate.getDate())+"#;";
            } else {
                qry = "DELETE milkCollectionBill.*, producer.producergroupid, milkCollectionBill.from_date, milkCollectionBill.to_date" +
                        " FROM producer INNER JOIN milkCollectionBill ON producer.prod_id = milkCollectionBill.prod_id" +
                        " WHERE (((producer.producergroupid)="+grid[cmbgroup.getSelectedIndex()]+") AND ((milkCollectionBill.from_date)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND ((milkCollectionBill.to_date)<=#"+mdy.format(dtptodate.getDate())+"#));";
            }
            PreparedStatement deletebill;
            deletebill = conn.prepareStatement(qry);
            deletebill.execute();
            deletebill.close();
            
            // Delete producer deduction detail for the selected bill period
            qry = "DELETE * FROM prodbilldeduction WHERE dedfromdate >= #"+ mdy.format(dtpfromdate.getDate()) +"# and dedtodate <= #"+ mdy.format(dtptodate.getDate()) +"#;";
            PreparedStatement deletedeductbill;
            deletedeductbill = conn.prepareStatement(qry);
            deletedeductbill.execute();
            deletedeductbill.close();
            
            // Insert Query for bill 
            qry = "INSERT INTO milkCollectionBill (from_date,to_date,prod_code,prod_name,"+
                    "tot_milk,avg_FAT,avg_rate,tot_milkamount,tot_commision,tot_sh_anamat,tot_ribet,"+
                    "chiling_charges,travalingexp,pashukhadya,mlkbilladv,otherded,docfee,"+
                    "sourmlkamt,amt_payable,AddedByFK, prod_id, advancebal) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement INSERT_QRY;            
            INSERT_QRY = conn.prepareStatement(qry);

            // Insert query for deduction
            String qry1 = "INSERT INTO prodbilldeduction (dedfromdate,dedtodate,pro_code,rebate,"+
                    "shareanamat,chilingcharges,AddedByFK,totamilk,amount, advance_amount) VALUES(?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement INSERT_DEDQRY;            
            INSERT_DEDQRY = conn.prepareStatement(qry1);            
            
            // Get Producer list for the period
            if (cmbgroup.getSelectedIndex()==0) {
                
                qry = "SELECT producer.ID, producer.pro_name, producer.comission, producer.ribet,"+
                        " producer.share_amt, producer.chiling_amt, producer.veh_exp, producer.prod_id" +
                        " FROM producer INNER JOIN mlkCollection ON producer.prod_id = mlkCollection.prod_id" +
                        " WHERE (((producer.member)=True) AND ((mlkCollection.trn_date)>=#"+mdy.format(dtpfromdate.getDate())+"#"+
                        " And (mlkCollection.trn_date)<=#"+mdy.format(dtptodate.getDate())+"#))" +
                        " GROUP BY producer.ID, producer.pro_name, producer.comission, producer.ribet,"+
                        " producer.share_amt, producer.chiling_amt, producer.veh_exp, producer.prod_id" +
                        " ORDER BY producer.ID;";

            } else {
                  
                qry = "SELECT producer.ID, producer.pro_name, producer.comission, producer.ribet,"+
                        " producer.share_amt, producer.chiling_amt, producer.veh_exp, producer.prod_id" +
                        " FROM producer INNER JOIN mlkCollection ON producer.prod_id = mlkCollection.prod_id" +
                        " WHERE (((producer.member)=True) " + 
                        " AND ((mlkCollection.trn_date)>=#"+mdy.format(dtpfromdate.getDate())+"#"+
                        " And (mlkCollection.trn_date)<=#"+mdy.format(dtptodate.getDate())+"#) " + 
                        " AND ((producer.producergroupid)="+grid[cmbgroup.getSelectedIndex()]+"))" +
                        " GROUP BY producer.ID, producer.pro_name, producer.comission, producer.ribet,"+
                        " producer.share_amt, producer.chiling_amt, producer.veh_exp, producer.prod_id" +
                        " ORDER BY producer.ID;";
            
            }
            
            //System.out.println(qry);
                    
            PreparedStatement getproducer;
            getproducer = conn.prepareStatement(qry);
            
            ResultSet rs_prod;
            ResultSet rs_prod_bill;
            rs_prod = getproducer.executeQuery();
            while (rs_prod.next()) {
                
                // Set default varuable
                comm = 0;
                commission = 0;
                totmilk = 0;
                avg_fat = 0;
                avg_snf = 0;
                avg_rate = 0;
                tot_amt = 0;
                anamat_per = 0;      // per liter
                rebate_per = 0;      // per liter
                vehcharg_per = 0;    // per liter
                chilcharg_per = 0;   // per liter
                anamat = 0;      // per liter
                rebate = 0;      // per liter
                vehcharg = 0;    // per liter
                chilcharg = 0;   // per liter
                pashukhadya = 0;
                milkbilladv = 0;
                milkbilladvbal = 0;
                Pashukhadyabal = 0;
                docfee = 0;
                otherded = 0;
                totdeduction = 0;
                amt_payable = 0;
                saurmilkamt = 0;                
                
                prod_id = rs_prod.getInt("prod_id");
                prod_code = rs_prod.getInt("ID");
                prod_name = rs_prod.getString("pro_name");
                comm = rs_prod.getDouble("comission");
                rebate_per = rs_prod.getDouble("ribet");
                anamat_per = rs_prod.getDouble("share_amt");
                chilcharg_per = rs_prod.getDouble("chiling_amt");
                vehcharg_per = rs_prod.getDouble("veh_exp");
                
                // Get collection detail for the period
                qry = "SELECT Sum(mlkCollection.weight) AS SumOfweight,"+
                      " Sum([mlkCollection]![weight]*[mlkCollection]![fat]) AS weightfat,"+
                      " Sum([mlkCollection]![weight]*[mlkCollection]![snf]) AS weightsnf,"+
                      " Sum([mlkCollection]![weight]*[mlkCollection]![rate]) AS weightrate,"+
                      " Sum([mlkCollection]![smw]*[mlkCollection]![smr]) AS Expr1 FROM mlkCollection" +
                      " WHERE (((mlkCollection.trn_date)>=#"+mdy.format(dtpfromdate.getDate())+"# And"+
                      " (mlkCollection.trn_date)<=#"+mdy.format(dtptodate.getDate())+"#) AND"+
                      " ((mlkCollection.prod_id)="+prod_id+"));";
                System.out.println(qry);
                PreparedStatement getbill;
                getbill = conn.prepareStatement(qry);                
                rs_prod_bill = getbill.executeQuery();
                if(rs_prod_bill.next()) {
                    
//                    System.out.println("Am Here..!! In If " + prod_id);
//                    System.out.println("Am Here..!! In If " + rs_prod_bill.getDouble("SumOfweight"));
                    totmilk = rs_prod_bill.getDouble("SumOfweight");
                    tot_amt = rs_prod_bill.getDouble("weightrate");
                    if (totmilk != 0) {
                        avg_fat = rs_prod_bill.getDouble("weightfat") / totmilk;
                        avg_rate = tot_amt / totmilk;
                        avg_snf = rs_prod_bill.getDouble("weightsnf") / totmilk;
                    } else {
                        avg_fat = 0;
                        avg_rate = 0;
                        avg_snf = 0;
                    }
                    
                    saurmilkamt = rs_prod_bill.getDouble("Expr1");
                    
                    anamat = totmilk * anamat_per;
                    rebate = totmilk * rebate_per;
                    //System.out.println("Rebate is : " +rebate);
                    chilcharg = totmilk * chilcharg_per;
                    vehcharg = totmilk * vehcharg_per;
                    
                    commission = totmilk * comm;
                    
                } else {
                    totmilk = 0;
                    tot_amt = 0;
                    avg_fat = 0;
                    avg_rate = 0;
                    avg_snf = 0;
                    saurmilkamt = 0;
                    anamat = 0;
                    rebate = 0;
                    chilcharg = 0;
                    vehcharg = 0;
                    commission = 0;
                } 
                rs_prod_bill.close();
                getbill.close();
                
//                qry = "SELECT deduction.ID, deduction.pro_code, producer.pro_name,"+
//                      " [deduction]![pashukhadya]+[deduction]![advance]+[deduction]![otherded]+[deduction]![doctorfee] AS Expr1,"+
//                      " deduction.dedfromdate, deduction.dedtodate, deduction.pashukhadya, deduction.advance, deduction.otherded,"+
//                      " deduction.doctorfee FROM producer INNER JOIN deduction ON producer.ID=deduction.pro_code" +
//                      " WHERE (((deduction.pro_code)="+prod_id+") AND ((deduction.dedfromdate)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND"+
//                      " ((deduction.dedtodate)<=#"+mdy.format(dtptodate.getDate())+"#));";

//                qry = "SELECT deduction.ID, deduction.pro_code, producer.pro_name,"+
//                      " [deduction]![pashukhadya]+[deduction]![advance]+[deduction]![otherded]+[deduction]"+
//                      "![doctorfee] AS Expr1, deduction.dedfromdate, deduction.dedtodate, deduction.pashukhadya,"+
//                      " deduction.advance, deduction.otherded, deduction.doctorfee" +
//                      " FROM producer INNER JOIN deduction ON producer.prod_id = deduction.pro_code" +
//                      " WHERE (((deduction.pro_code)="+prod_id+") AND ((deduction.dedfromdate)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND"+
//                      " ((deduction.dedtodate)<=#"+mdy.format(dtptodate.getDate())+"#));";
                
                // Check advance detail
                // calculate advance
                String qry2 = "SELECT Sum(addition.amount) AS SumOfamount, Sum(addition.ded_amt) AS SumOfded_amt" +
                        " FROM addition INNER JOIN producer ON addition.pro_code = producer.prod_id" +     
                        " WHERE (((addition.pro_code)="+prod_id+") AND add_type like 'Uchal');"; 
                //AND deduction_type like 'Auto' 
                
                
                //System.out.println(qry2);
                PreparedStatement getmilkdetail;
                getmilkdetail = conn.prepareStatement(qry2);
                ResultSet rspname;
                rspname = getmilkdetail.executeQuery();
                double totalAdvance = 0;
                while(rspname.next()) {
                    totalAdvance = rspname.getDouble("SumOfamount");
                    milkbilladv = milkbilladv + rspname.getDouble("SumOfded_amt");
                    break;
                }
                rspname.close();
                getmilkdetail.close();
                
                // Toatal Pashukhadya 
                qry2 = "SELECT Sum(addition.amount) AS SumOfamount, Sum(addition.ded_amt) AS SumOfded_amt" +
                        " FROM addition INNER JOIN producer ON addition.pro_code = producer.prod_id" +     
                        " WHERE (((addition.pro_code)="+prod_id+") AND add_type like 'Pashukhadya Vikri');";
                // deduction_type like 'Auto' AND
                //System.out.println(qry2);
                getmilkdetail = conn.prepareStatement(qry2);
                rspname = getmilkdetail.executeQuery();
                double totalPashukhadyaAdvance = 0;
                while(rspname.next()) {
                    totalPashukhadyaAdvance = rspname.getDouble("SumOfamount");
                    pashukhadya = pashukhadya + rspname.getDouble("SumOfded_amt");
                    break;
                }
                rspname.close();
                getmilkdetail.close();
                
                //System.out.println("Total Advance : " + totalAdvance);
                
                // Get the deduction detail for the selected period for the selected produder
                qry = "SELECT deduction.pro_code, producer.pro_name, "
                        + "Sum([deduction]![pashukhadya]+[deduction]![advance]+[deduction]![otherded]+[deduction]![doctorfee]) AS Expr1, "
                        + "Sum(deduction.pashukhadya) AS SumOfpashukhadya, "
                        + "Sum(deduction.advance) AS SumOfadvance, "
                        + "Sum(deduction.otherded) AS SumOfotherded, "
                        + "Sum(deduction.doctorfee) AS SumOfdoctorfee\n" +
                        "FROM producer INNER JOIN deduction ON producer.prod_id = deduction.pro_code\n" +
                        "WHERE (((deduction.dedfromdate)>=#"+mdy.format(dtpfromdate.getDate())+"#) AND ((deduction.dedtodate)<=#"+mdy.format(dtptodate.getDate())+"#))\n" +
                        "GROUP BY deduction.pro_code, producer.pro_name\n" +
                        "HAVING (((deduction.pro_code)="+prod_id+"));";
                //System.out.println("Deduction Query : " + qry);
                PreparedStatement getdeduction;
                getdeduction = conn.prepareStatement(qry);                
                rs_prod_bill = getdeduction.executeQuery();
                if(rs_prod_bill.next()) {
                    
                    pashukhadya = pashukhadya + rs_prod_bill.getDouble("SumOfpashukhadya");
                    otherded = rs_prod_bill.getDouble("SumOfotherded");
                    docfee = rs_prod_bill.getDouble("SumOfdoctorfee");
                    milkbilladv = milkbilladv + rs_prod_bill.getDouble("SumOfadvance");
                    
                    //totdeduction = rs_prod_bill.getDouble("Expr1");
                    totdeduction = pashukhadya + otherded + docfee + milkbilladv;
                } else {
                    //pashukhadya = 0;
                    otherded = 0;
                    docfee = 0;
                    //milkbilladv = 0;
                    totdeduction = pashukhadya + milkbilladv;
                }
                rs_prod_bill.close();
                getdeduction.close();
                
                if (methods.deduct_rebate_from_bill) {
                    amt_payable = (tot_amt + commission) - (anamat + rebate + chilcharg + vehcharg + pashukhadya + otherded + docfee);
                } else {
                    amt_payable = (tot_amt + commission) - (anamat + chilcharg + vehcharg + pashukhadya + otherded + docfee);
                }
                
//                System.out.println(twodf.format(totmilk));
//                System.out.println(twodf.format(avg_fat));
//                System.out.println(twodf.format(avg_rate));
//                System.out.println(twodf.format(tot_amt));
//                System.out.println(twodf.format(commission));
//                System.out.println(twodf.format(anamat));
//                System.out.println(twodf.format(rebate));
//                System.out.println(twodf.format(chilcharg));
//                System.out.println(twodf.format(vehcharg));
//                System.out.println(twodf.format(pashukhadya));
//                System.out.println(twodf.format(milkbilladv));
//                System.out.println(twodf.format(otherded));
//                System.out.println(twodf.format(docfee));
//                System.out.println(twodf.format(saurmilkamt));
//                System.out.println(twodf.format(amt_payable));
                
                // calculate deduction for advance and pashukhadya befor the selected period for the calculation of balance
                
                //qry2 = "SELECT]] Sum(prodbilldeduction.advance_amount) AS SumOfadvance FROM prodbilldeduction" +
                //     " WHERE (((prodbilldeduction.pro_code)="+prod_id+"));";
                qry2 = "SELECT Sum(deduction.pashukhadya) AS SumOfpashukhadya, "
                        + "Sum(deduction.advance) AS SumOfadvance"
                        + " FROM deduction "
                        + "WHERE (((deduction.dedfromdate)<#"+mdy.format(dtpfromdate.getDate())+"#) "
                        + "AND ((deduction.pro_code)="+prod_id+"));";
                //PreparedStatement getmilkdetail;
                getmilkdetail = conn.prepareStatement(qry2);
                
                
                rspname = getmilkdetail.executeQuery();
                double totalAdvDeduction = 0;
                double totalPashuDeduction = 0;
                while(rspname.next()) {
                    totalAdvDeduction = rspname.getDouble("SumOfadvance");
                    totalPashuDeduction = rspname.getDouble("SumOfpashukhadya");
                    break;
                }
                rspname.close();
                getmilkdetail.close();
                
                //System.out.println(totalAdvance);
                //System.out.println(totalDeduction);
                
                // *================================================
                // Commented for Nilesh Thorat
                // *================================================
//                if (amt_payable <= milkbilladv) {
//                    milkbilladv = amt_payable;
//                }
                milkbilladvbal = totalAdvance - (milkbilladv + totalAdvDeduction); //totalDeduction;
                Pashukhadyabal = totalPashuDeduction - (pashukhadya + totalPashukhadyaAdvance);
                
                //System.out.println(milkbilladvbal);
                amt_payable = amt_payable - milkbilladv;
                
                INSERT_QRY.setString(1, ""+dmy.format(dtpfromdate.getDate())); //from_date
                INSERT_QRY.setString(2, ""+dmy.format(dtptodate.getDate())); // to_date
                INSERT_QRY.setString(3, ""+prod_code); // prod_code
                INSERT_QRY.setString(4, prod_name); // prod_name 
                INSERT_QRY.setString(5, ""+twodf.format(totmilk)); // tot_milk
                INSERT_QRY.setString(6, ""+onedf.format(avg_fat)); // avg_FAT
                INSERT_QRY.setString(7, ""+twodf.format(avg_rate)); // avg_rate
                INSERT_QRY.setString(8, ""+twodf.format(tot_amt)); // tot_milkamount
                INSERT_QRY.setString(9, ""+twodf.format(commission)); // tot_commision
                INSERT_QRY.setString(10, ""+twodf.format(anamat)); // tot_sh_anamat
                INSERT_QRY.setString(11, ""+twodf.format(rebate)); // tot_ribet
                INSERT_QRY.setString(12, ""+twodf.format(chilcharg)); // chiling_charges
                INSERT_QRY.setString(13, ""+twodf.format(vehcharg)); // travalingexp
                INSERT_QRY.setString(14, ""+twodf.format(pashukhadya)); // pashukhadya
                INSERT_QRY.setString(15, ""+twodf.format(milkbilladv)); //  mlkbilladv
                INSERT_QRY.setString(16, ""+twodf.format(otherded)); // otherded
                INSERT_QRY.setString(17, ""+twodf.format(docfee)); // docfee
                INSERT_QRY.setString(18, ""+twodf.format(saurmilkamt)); // sourmlkamt
                INSERT_QRY.setString(19, ""+twodf.format(amt_payable)); // amt_payable
                INSERT_QRY.setString(20, ""+methods.userid); // AddedByFK
                INSERT_QRY.setString(21, ""+prod_id); // AddedByFK
                INSERT_QRY.setString(22, ""+twodf.format(milkbilladvbal)); // AddedByFK
                
                INSERT_QRY.execute();
                
                INSERT_DEDQRY.setString(1, ""+dmy.format(dtpfromdate.getDate())); //from_date
                INSERT_DEDQRY.setString(2, ""+dmy.format(dtptodate.getDate())); // to_date
                INSERT_DEDQRY.setString(3, ""+prod_id); // prod_code
                INSERT_DEDQRY.setString(4, ""+twodf.format(rebate)); // tot_sh_anamatanamat
                INSERT_DEDQRY.setString(5, ""+twodf.format(anamat)); // tot_ribet
                INSERT_DEDQRY.setString(6, ""+twodf.format(chilcharg)); // chiling_charges
                INSERT_DEDQRY.setString(7, ""+methods.userid); // AddedByFK
                INSERT_DEDQRY.setString(8, ""+twodf.format(totmilk)); // tot_milk
                INSERT_DEDQRY.setString(9, ""+twodf.format(tot_amt)); // tot_milkamount
                INSERT_DEDQRY.setString(10, ""+twodf.format(milkbilladv));
                
                INSERT_DEDQRY.execute();
                
//                System.out.println("Prod Code : "+ prod_id);
//                System.out.println("Prod Name : "+ prod_name);
//                System.out.println("Total Milk : "+ twodf.format(totmilk));
//                System.out.println("avg fat : "+ onedf.format(avg_fat));
//                System.out.println("avg rate : "+ twodf.format(avg_rate));
//                System.out.println("avg snf : "+ onedf.format(avg_snf));
//                System.out.println("Commission : "+ twodf.format(commission));
//                System.out.println("Rebate : "+ twodf.format(rebate));
//                System.out.println("Anamat : "+ twodf.format(anamat));
//                System.out.println("Vehical Charges : "+ twodf.format(vehcharg));
//                System.out.println("Chiling Charges : "+ twodf.format(chilcharg));
//                System.out.println("Pashukhadya : "+ twodf.format(pashukhadya));
//                System.out.println("Other Ded : "+ twodf.format(otherded));
//                System.out.println("Doc Fee : "+ twodf.format(docfee));
//                System.out.println("Advance : "+ twodf.format(milkbilladv));

            }
            rs_prod.close();
            getproducer.close();
            
            JOptionPane.showMessageDialog(null, "Bill generated Successfully", title, JOptionPane.INFORMATION_MESSAGE);
            getbillreport();
        } catch (SQLException ex) {
            Logger.getLogger(producermilkbill.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btngeneratebillActionPerformed

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed
        getbillreport();
    }//GEN-LAST:event_btnrefreshActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        try {
            String cond_qry = "milkCollectionBill.from_date >= #"+ mdy.format(dtpfromdate.getDate()) +"# and milkCollectionBill.to_date <= #"+ mdy.format(dtptodate.getDate()) +"# ORDER BY milkCollectionBill.prod_code;";
            System.err.println(cond_qry);
            methods.displayreport("paymentregister", conn,cond_qry,""+dmy.format(dtpfromdate.getDate()), ""+dmy.format(dtptodate.getDate()));
        } catch (SQLException ex) {
            Logger.getLogger(producermilkbill.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnprintActionPerformed

    private void dtpfromdatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpfromdatePropertyChange
//        getbillreport();
    }//GEN-LAST:event_dtpfromdatePropertyChange

    private void btnprint1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprint1ActionPerformed
        if(conn!=null) {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(producermilkbill.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.dispose();
    }//GEN-LAST:event_btnprint1ActionPerformed

    private void dtptodatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtptodatePropertyChange
//        getbillreport();
    }//GEN-LAST:event_dtptodatePropertyChange

    private void btnrefresh1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefresh1ActionPerformed
        try {
            qry = "DELETE * FROM milkCollectionBill where from_date>=#"+mdy.format(dtpfromdate.getDate())+"# and to_date<=#"+mdy.format(dtptodate.getDate())+"#;";
            PreparedStatement deletebill;
            deletebill = conn.prepareStatement(qry);
            deletebill.execute();
            deletebill.close();

            qry = "DELETE * FROM prodbilldeduction WHERE dedfromdate >= #"+ mdy.format(dtpfromdate.getDate()) +"# and dedtodate <= #"+ mdy.format(dtptodate.getDate()) +"#;";
            PreparedStatement deletedeductbill;
            deletedeductbill = conn.prepareStatement(qry);
            deletedeductbill.execute();
            deletedeductbill.close();        
            
            JOptionPane.showMessageDialog(null, "Bill Deleted Successfully..!!", title, JOptionPane.INFORMATION_MESSAGE);
            getbillreport();
            
        } catch (SQLException ex) {
            Logger.getLogger(producermilkbill.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnrefresh1ActionPerformed

    private void cmbgroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbgroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbgroupActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btngeneratebill;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnprint1;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JButton btnrefresh1;
    private javax.swing.JComboBox cmbgroup;
    private com.toedter.calendar.JDateChooser dtpfromdate;
    private com.toedter.calendar.JDateChooser dtptodate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table_bill;
    private javax.swing.JFormattedTextField txtamtpayable;
    private javax.swing.JFormattedTextField txttotalmilk;
    private javax.swing.JFormattedTextField txttotalmilkamt;
    private javax.swing.JFormattedTextField txttotdeduction;
    // End of variables declaration//GEN-END:variables
}