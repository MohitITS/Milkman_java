/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package milkman;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.*;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Rakesh
 */

public class ratechart extends javax.swing.JInternalFrame implements TableModelListener, ActionListener  {

    /**
     * Creates new form ratechart
     */
    int framestate; // 1=addmode 2=Editmode 3=viewmode
    Connection conn;
    ResultSet rs;
    private DefaultTableModel dtm;
    private DefaultTableModel rowheader;
    //private String rowData[][];
    DecimalFormat onedf = new DecimalFormat("#.#");
    DecimalFormat twodf = new DecimalFormat("#.##");
////    String mask = "##:##";
////    MaskFormatter timeFormatter;
    
    int standard_row=0;
    int standard_col=0;
    private int id;
    private double rowdata[][];
    
    public ratechart() {
//        try {
//            this.timeFormatter = new MaskFormatter(mask);
//        } catch (ParseException ex) {
//            Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
//        }
        initComponents();
        framestate=3;
        
        if ("Yes".equals(methods.ratechart_asper_time)) {
            jPanel3.setVisible(true);
        } else {
            jPanel3.setVisible(false);
        }
        
        genratetable();
        optstandard.setSelected(true);
        // methode for scroll scrollpane simultaneously
        Synchronizer synchronizer = new Synchronizer(jScrollPane2, jScrollPane3);
        
        jScrollPane2.getVerticalScrollBar().addAdjustmentListener(synchronizer);
        jScrollPane2.getHorizontalScrollBar().addAdjustmentListener(synchronizer);
        jScrollPane3.getVerticalScrollBar().addAdjustmentListener(synchronizer);
        jScrollPane3.getHorizontalScrollBar().addAdjustmentListener(synchronizer);        

        emptyctr();
        
        //JFormattedTextField formattedField = new JFormattedTextField(timeFormatter);
        
        ED_BUTTONS(false, true);
        displayrecord(1);                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        txtratechartno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        cmbmilktype = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        optstandard = new javax.swing.JRadioButton();
        optfullcolumn = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_ratechart = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_rowheader = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        txtToTime = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFromTime = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setTitle("रेट चार्ट");

        jPanel1.setBackground(new java.awt.Color(113, 168, 168));

        jButton1.setBackground(new java.awt.Color(128, 157, 201));
        jButton1.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton1.setText("नवीन");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.setBorderPainted(false);
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton2.setText("बदल");
        jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton2.setBorderPainted(false);
        jButton2.setOpaque(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton3.setText("डिलीट");
        jButton3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton3.setBorderPainted(false);
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton4.setText("सेव्ह");
        jButton4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton4.setBorderPainted(false);
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton5.setText("शोधणे");
        jButton5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton5.setBorderPainted(false);
        jButton5.setOpaque(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton6.setText("बंद");
        jButton6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton6.setBorderPainted(false);
        jButton6.setOpaque(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton11.setText("प्रिंट");
        jButton11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton11.setBorderPainted(false);
        jButton11.setOpaque(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton12.setText("रेट चार्ट सेटिंग");
        jButton12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton12.setBorderPainted(false);
        jButton12.setOpaque(false);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtratechartno.setEditable(false);
        txtratechartno.setFont(new java.awt.Font("Mangal", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jLabel4.setText("रेट चार्ट नंबर :");

        jPanel2.setBackground(new java.awt.Color(113, 168, 168));

        jButton7.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton7.setText("पहिला");
        jButton7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton7.setBorderPainted(false);
        jButton7.setOpaque(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton8.setText("आगोदर");
        jButton8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton8.setBorderPainted(false);
        jButton8.setOpaque(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton9.setText("पुढचा");
        jButton9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton9.setBorderPainted(false);
        jButton9.setOpaque(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jButton10.setText("शेवटचा");
        jButton10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton10.setBorderPainted(false);
        jButton10.setOpaque(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        cmbmilktype.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        cmbmilktype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "गाय", "म्हैस" }));
        cmbmilktype.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbmilktypeItemStateChanged(evt);
            }
        });
        cmbmilktype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbmilktypeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jLabel6.setText("दुध प्रकार :");

        optstandard.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(optstandard);
        optstandard.setText("STANDARD");
        optstandard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optstandardActionPerformed(evt);
            }
        });

        optfullcolumn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(optfullcolumn);
        optfullcolumn.setText("FULL COLUMN");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jScrollPane2FocusLost(evt);
            }
        });

        table_ratechart.setFont(new java.awt.Font("Mangal", 0, 14)); // NOI18N
        table_ratechart.setCellSelectionEnabled(true);
        table_ratechart.setRowHeight(24);
        table_ratechart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                table_ratechartKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(table_ratechart);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        table_rowheader.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_rowheader.setRowHeight(24);
        jScrollPane3.setViewportView(table_rowheader);

        txtToTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));

        jLabel8.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jLabel8.setText("वेळ पर्यंत :");

        txtFromTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));

        jLabel7.setFont(new java.awt.Font("Mangal", 1, 14)); // NOI18N
        jLabel7.setText("वेळ पासून :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFromTime, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtToTime, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtFromTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtToTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtratechartno, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbmilktype, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(optstandard)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optfullcolumn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(txtratechartno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(cmbmilktype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(optstandard, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(optfullcolumn))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        framestate = 1;
        ED_BUTTONS(true, false);
        emptyctr();
        txtratechartno.setText(""+getratechartid());
    }//GEN-LAST:event_jButton1ActionPerformed

    public int getratechartid(){
        try {
            int rid;
            String qry;
            ResultSet rsid;
            if(conn!=null) {
                conn.close();
            }
            conn = methods.getConnection();
            int milkid = cmbmilktype.getSelectedIndex();
            milkid = milkid + 1;
            qry = "SELECT Max(rateChart.rtc_no) AS MaxOfrtc_no FROM rateChart" +
                    " WHERE (((rateChart.milktype_id)="+milkid+"));";
            PreparedStatement maxid = conn.prepareStatement(qry);
            rsid = maxid.executeQuery();
            while(rsid.next()) {
                rid = rsid.getInt("MaxOfrtc_no");
                System.out.println(rid);
                if(rid == 0){
                    id = 1;
                } else {
                    id = rid + 1;
                }
                break;
            }
            rsid.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    private void displayrecord(int flag) {
        if(framestate==3){
            try {
                if(conn!=null){
                    conn.close();
                }
                conn = methods.getConnection();
                String qry = null;
                int milkid = cmbmilktype.getSelectedIndex();
                milkid = milkid + 1;
                if(flag==4){
                   qry = "SELECT rateChart.rtc_no, rateChart.milktype_id, rateChart.rate, rateChart.fat, rateChart.snf, rateChart.clr FROM rateChart " +
                        "WHERE (((rateChart.rtc_no)=(SELECT Max(rateChart.rtc_no) AS MaxOfrtc_no FROM rateChart)) AND ((rateChart.milktype_id)="+milkid+")) " +
                        "ORDER BY rateChart.ID;";
                }
                if(flag==1){
                   qry = "SELECT rateChart.* FROM rateChart " +
                         "WHERE ((rateChart.rtc_no)=(Select min(rtc_no) as mintrcno from rateChart)"+
                         " AND ((rateChart.milktype_id)="+milkid+")) ORDER BY rateChart.ID;";
                }
                if(flag==2){
                    qry = "SELECT rateChart.rtc_no, rateChart.milktype_id, rateChart.rate, rateChart.fat, rateChart.snf, rateChart.clr FROM rateChart " +
                        "WHERE (((rateChart.rtc_no)<("+txtratechartno.getText()+")) AND ((rateChart.milktype_id)="+milkid+")) " +
                        "ORDER BY rateChart.ID;";
                   //qry = "SELECT * FROM ratechart WHERE ID<"+txtratechartno.getText()+" ORDER BY ID DESC;";
                }
                if(flag==3){
                    qry = "SELECT rateChart.rtc_no, rateChart.milktype_id, rateChart.rate, rateChart.fat, rateChart.snf, rateChart.clr FROM rateChart " +
                        "WHERE (((rateChart.rtc_no)>("+txtratechartno.getText()+")) AND ((rateChart.milktype_id)="+milkid+")) " +
                        "ORDER BY rateChart.ID;";                    
                   //qry = "SELECT * FROM ratechart WHERE ID>"+txtratechartno.getText()+" ORDER BY ID;";
                }  
                if(flag==5){
                   qry = "SELECT rateChart.* FROM rateChart " +
                         "WHERE ((rateChart.rtc_no)="+txtratechartno.getText()+""+
                         " AND ((rateChart.milktype_id)="+milkid+")) ORDER BY rateChart.ID;";                
                }
                //System.out.println(qry);
                
                //emptyctr();
                Statement selectqry = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                rs = selectqry.executeQuery(qry);
                if(rs.next()) {
                    //System.out.println(rs.getInt("milktype_id"));
                
                    if(framestate!=3) {
                        if(rs.getInt("milktype_id")==1){
                            cmbmilktype.setSelectedIndex(0);
                        } else {
                            cmbmilktype.setSelectedIndex(1);
                        }                
                        txtratechartno.setText(rs.getString("rtc_no"));
                        rs.beforeFirst();
                        rs.next();
                    }
                    int i;
                    int j;

                    //System.out.println("am here");
                    for(i=0;i<table_ratechart.getRowCount();i++) {
                        for(j=0;j<table_ratechart.getColumnCount();j++) {
                            //System.out.println("Row: "+i+" Col: "+j);
                            double rt = rs.getDouble("rate");
                            String rat = twodf.format(rt);
                            double rate = Double.parseDouble(rat);
                            table_ratechart.setValueAt(rate, i, j);
                            //System.out.println("In for loop");
                            rs.next();
                        }
                    }
                }
                rs.close();
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void emptyctr() {
        txtratechartno.setText(null);
        //txtFromTime( timeFormatter );
        int r = table_ratechart.getRowCount();
        int c = table_ratechart.getColumnCount();
        
        int i;
        int j;
        for(i=0;i<r;i++) {
            for(j=0;j<c;j++) {
                //System.out.println("Row: "+i+" Col: "+j);
                table_ratechart.setValueAt("", i, j);
            }
        } 
    }
    
    private void ED_BUTTONS(boolean f1, boolean f2) {
        txtratechartno.setEditable(true);
        cmbmilktype.setEnabled(true);
        table_ratechart.setEnabled(f1);

        // buttoms
        jButton1.setEnabled(f2); //new false
        jButton2.setEnabled(f2); //edit false
        jButton3.setEnabled(f2); //delete false 
        jButton4.setEnabled(f1); //save true
        jButton5.setEnabled(f2); //search false 
        if(framestate==1 || framestate==2){
            jButton6.setEnabled(f1); //exit true
            jButton6.setText("मागे"); 
        }
        else {
            jButton6.setEnabled(f2); //exit true
            jButton6.setText("बंद"); 
        }
        jButton7.setEnabled(f2); //first
        jButton8.setEnabled(f2); //previouse
        jButton9.setEnabled(f2); //next
        jButton10.setEnabled(f2); //last
        jButton11.setEnabled(f2); //last
        jButton12.setEnabled(f2); //last
    }    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        framestate = 2;
        ED_BUTTONS(true, false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String msg="रेकॉर्ड कायमचा काढून टाकणे?";
        int ans;
        if(!txtratechartno.getText().equals("")) {
            ans = JOptionPane.showConfirmDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
            if(ans == JOptionPane.YES_OPTION){
                try {
                    if(conn!=null){
                        conn.close();
                    }
                    conn=methods.getConnection();
                    int milkid = cmbmilktype.getSelectedIndex();
                    milkid = milkid+1;
                    String deleteqry = "DELETE * FROM ratechart WHERE rtc_no="+txtratechartno.getText()+" and milktype_id = "+milkid+";";
                    PreparedStatement DELETE_QRY = conn.prepareStatement(deleteqry);
                    DELETE_QRY.execute();
                    JOptionPane.showMessageDialog(null, "रेकॉर्ड काढून टाकण्यात आला आहे.", title, JOptionPane.INFORMATION_MESSAGE);
                    emptyctr();
                    displayrecord(4);
                } catch (SQLException ex) {
                    Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "रेकॉर्ड नाही..!!", title, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int milkid = cmbmilktype.getSelectedIndex();
        milkid = milkid+1;
        int r = table_ratechart.getRowCount();
        int c = table_ratechart.getColumnCount();
        int i;
        int j;
        double fat = 0; 
        double snf = 0;
        double clr = 0;
        
        if(cmbmilktype.getSelectedIndex()==0) {
            fat = methods.min_CMFAT;
            snf = methods.min_CMSNF;
            clr = methods.min_cmclr;
        } else {
            fat = methods.min_BMFAT;
            snf = methods.min_BMSNF;                    
            clr = methods.min_bmclr;
        }
        
        if ("Yes".equals(methods.ratechart_asper_time)) {
            if ( "".equals(txtFromTime.getText()) || "".equals(txtToTime.getText()) ) {
                JOptionPane.showMessageDialog(null, "कृपया वेळ पासून / वेळ पर्यंत रकाना भरा.", title, JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } else {
            txtFromTime.setText("00:00");
            txtToTime.setText("00:00");
        }
        
        try {
            if(conn!=null){
                conn.close();
            }
            conn = methods.getConnection();
            // Insert new Record
            if(framestate!=1){
                // Delete the rate chart
                String deleteqry = "DELETE * FROM ratechart WHERE rtc_no="+txtratechartno.getText()+" and milktype_id = "+milkid+";";
                PreparedStatement DELETE_QRY = conn.prepareStatement(deleteqry);
                DELETE_QRY.execute();
                // end if deleteng rate chart
            } 
            //int maxvalue = r*c;
            //PB_Updaterate.setMaximum(maxvalue);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String insertqry;
            insertqry = "INSERT INTO rateChart (rtc_no, fat, snf, clr, rate, milktype_id, fromtime, totime)"+
                  " VALUES(?,?,?,?,?,?,?,?)";  
                //" VALUES ("+txtratechartno.getText()+","+onedf.format(fat)+","+onedf.format(snf)+","+twodf.format(rate)+","+milkid+")"5;
            PreparedStatement INSERT_QRY = conn.prepareStatement(insertqry);
            Object rt;
            for(i=0;i<r;i++) {
                for(j=0;j<c;j++) {
                    
                    //System.out.println("Row: "+i+" Col: "+j);
                    rt = table_ratechart.getValueAt(i, j);
                    //rt = rowdata[i][j];
                    double rate = Double.parseDouble(""+rt);
                        
                    INSERT_QRY.setString(1, txtratechartno.getText());
                    INSERT_QRY.setString(2, ""+onedf.format(fat));
                    switch (methods.ratechartcalcbase_CM) {
                        case "FAT-SNF":
                            INSERT_QRY.setString(3, ""+onedf.format(snf));
                            snf = snf + 0.1;
                            INSERT_QRY.setString(4, null);
                            break;
                        case "FAT-CLR":
                            INSERT_QRY.setString(3, null);                        
                            INSERT_QRY.setString(4, ""+onedf.format(clr));
                            clr = clr + methods.clrdiff;
                            break;
                    }
                    INSERT_QRY.setString(5, ""+twodf.format(rate));
                    INSERT_QRY.setString(6, ""+milkid);
                    INSERT_QRY.setString(7, ""+txtFromTime.getText());
                    INSERT_QRY.setString(8, ""+txtToTime.getText());
                    
                    //System.out.println(txtratechartid.getText());
                    //INSERT_QRY = conn.prepareStatement(insertqry);
                    INSERT_QRY.execute();
                    //lbl_progress.setText("Updateing Row : "+i+" Col : "+j+" Rate : "+rate);
                    
                    //System.out.println("Row : "+i+" Col : "+j);
                    
                }
                if (milkid==1) {
                    snf = methods.min_CMSNF;
                    clr = methods.min_cmclr;
                } else {
                    snf = methods.min_BMSNF;
                    clr = methods.min_bmclr;
                }
                // Increament fat
                fat = fat + 0.1;
                //Thread.sleep(1000);
                //PB_Updaterate.setValue(i);
            } 
            setCursor(null);
            //PB_Updaterate.setValue(0);
            //lbl_progress.setText("");
            String msg = "रेट चार्ट सेव्ह झाला.";
            JOptionPane.showMessageDialog(null, msg, title, JOptionPane.INFORMATION_MESSAGE);
            Toolkit.getDefaultToolkit().beep();
            framestate=3;
            ED_BUTTONS(false, true);
            displayrecord(4);
            
        } catch (SQLException ex) {
            Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString(), "Milkman", JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(framestate==3){
            if (conn!=null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.dispose();
        }
        else {
            framestate = 3;
            ED_BUTTONS(false, true);
            displayrecord(4);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void genratetable() {
        int maxrows;
        int maxcols = 0;
        double k;
        String colheader[];
        
        // Fat Row Heder
        rowheader = new DefaultTableModel(0, 0);
        rowheader.addColumn("FAT");
        
        if(cmbmilktype.getSelectedIndex()==0) { // if cow milk is selected
            
            switch (methods.ratechartcalcbase_CM) {
                case "FAT-SNF":
                    maxcols = (int)(((methods.max_CMSNF - methods.min_CMSNF) * 10) + 1);
                    break;
                case "FAT-CLR":
                    maxcols = (int)(((methods.max_cmclr - methods.min_cmclr) * 2) + 1);
                    break;
            }
            maxrows = (int)(((methods.max_CMFAT - methods.min_CMFAT) * 10) + 1);
            
//            System.out.println(methods.max_CMSNF);
//            System.out.println(maxcols);
//            System.out.println(maxrows);
            
            colheader = new String[maxcols];
            k=0.0;
            for(int i=0; i<maxcols; i++){
                switch (methods.ratechartcalcbase_CM) {
                    case "FAT-SNF":
                        colheader[i] = ""+onedf.format(methods.min_CMSNF + k);
                        k = k + 0.1;
                        break;
                    case "FAT-CLR":
                        colheader[i] = ""+onedf.format(methods.min_cmclr + k);
                        k = k + methods.clrdiff;
                        break;
                }                
            }
            
            //dtm = new DefaultTableModel(rowData, colheader);
            k=0.0;
            for(int i=0; i<maxrows; i++){
                rowheader.addRow(new Object[] {""+onedf.format(methods.min_CMFAT + k)});
                k= k + 0.1;
            }            
            
            standard_row = (int)(((methods.std_CMFAT-methods.min_CMFAT)*10));
            switch (methods.ratechartcalcbase_CM) {
                case "FAT-SNF":
                    standard_col = (int)(((methods.std_CMSNF-methods.min_CMSNF)*10));
                    break;
                case "FAT-CLR":
                    standard_col = (int)(((methods.std_CMCLR-methods.min_cmclr)*2));
                    break;
            }                            
        }
        else {  // if Buffelow milk is selected

            switch (methods.ratechartcalcbase_BM) {
                case "FAT-SNF":
                    maxcols = (int)(((methods.max_BMSNF - methods.min_BMSNF) * 10) + 1);
                    break;
                case "FAT-CLR":
                    maxcols = (int)(((methods.max_bmclr - methods.min_bmclr) * 2) + 1);
                    break;
            }
            maxrows = (int)(((methods.max_BMFAT - methods.min_BMFAT) * 10) + 1);
            
            //System.out.println(maxcols);
            //System.out.println(maxrows);
            
            colheader = new String[maxcols];
            k=0.0;
            for(int i=0; i<maxcols; i++){
                switch (methods.ratechartcalcbase_BM) {
                    case "FAT-SNF":
                        colheader[i] = ""+onedf.format(methods.min_BMSNF + k);
                        k = k + 0.1;
                        break;
                    case "FAT-CLR":
                        colheader[i] = ""+onedf.format(methods.min_bmclr + k);
                        k = k + methods.clrdiff;
                        break;
                }
            }
            k=0.0;
            for(int i=0; i<maxrows; i++){
                rowheader.addRow(new Object[] {""+onedf.format(methods.min_BMFAT + k)});
                k= k + 0.1;
            }            
            
            //dtm = new DefaultTableModel(rowData, colheader);
            standard_row = (int)(((methods.std_BMFAT-methods.min_BMFAT)*10)); 
            switch (methods.ratechartcalcbase_BM) {
                case "FAT-SNF":
                    standard_col = (int)(((methods.std_BMSNF-methods.min_BMSNF)*10));
                    break;
                case "FAT-CLR":
                    standard_col = (int)(((methods.std_BMCLR-methods.min_bmclr)*2));
                    break;
            }
        }        

        table_rowheader.setModel(rowheader);
        
        dtm = new DefaultTableModel(colheader, maxrows);
        table_ratechart.setModel(dtm);
        table_ratechart.getModel().addTableModelListener(this);        
        
        //table_ratechart.set
        table_ratechart.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
        {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                //c.setBackground(row == standard_row ? Color.LIGHT_GRAY : Color.WHITE);
                //c.setForeground(row == standard_row ? Color.red : Color.WHITE);
                if(row==standard_row){
                    c.setBackground(Color.LIGHT_GRAY);
                    c.setForeground(Color.RED);                    
                } else {
                    c.setBackground(Color.WHITE);
                    c.setForeground(Color.BLACK);                    
                }
                return c;
            }
        });
        
        table_ratechart.getColumnModel().getColumn(standard_col).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                //c.setBackground(column == standard_col ? Color.LIGHT_GRAY : Color.WHITE);
                if(column==standard_col){
                    c.setBackground(Color.LIGHT_GRAY);
                    c.setForeground(Color.red);
                } else {
                    c.setBackground(Color.WHITE);
                    c.setForeground(Color.BLACK);                                        
                }
               
                return c;
            }            
        }); 
        //rowData = new String[table_ratechart.getRowCount()][table_ratechart.getColumnCount()];
    }
    
    private void cmbmilktypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbmilktypeItemStateChanged
        genratetable();
        if(framestate!=3) {
            txtratechartno.setText(""+getratechartid());
        } else {
            displayrecord(5);
        }
    }//GEN-LAST:event_cmbmilktypeItemStateChanged

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        try {
            
            //String path;
            //path = new File(".").getCanonicalPath();
            
            if(conn!=null) {
                conn.close();
            }
            conn = methods.getConnection();
            //int mid = cmbmilktype.getSelectedIndex();
            //mid = mid + 1;
            //String qry = "SELECT config.firmname, config.address, config.contatno,"+
            //        "rateChart.rtc_no, rateChart.fat, rateChart.snf, rateChart.rate,"+
            //        "rateChart.milktype_id, rateChart.ID " +
            //        "FROM rateChart, config " +
            //        "WHERE (((rateChart.rtc_no)="+txtratechartno.getText()+") AND ((rateChart.milktype_id)="+mid+"));";
            //JRDesignQuery newqry = new JRDesignQuery();
            //System.out.println(qry);
            methods.displayreport("ratechart", conn);
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
            Logger.getLogger(ratechart.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton11ActionPerformed

    private void table_ratechartKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_ratechartKeyReleased
        if(framestate!=3 && evt.getKeyCode()==10) {
//            System.out.println("In Key Release Event if loop");
            int r = table_ratechart.getSelectedRow();
            int c = table_ratechart.getSelectedColumn();
            Double rate;
            int torow;
            int tocol;
            String qry;
            if(optstandard.isSelected()) {
                if(r == standard_row && c == standard_col) { //if standard rate is inserted
                    //System.out.println("Am here.!");
                    rowdata = new double[table_ratechart.getRowCount()][table_ratechart.getColumnCount()];
                    try {        
                        if(conn!=null) {
                            conn.close();
                        }
                        conn = methods.getConnection();            
                        Object rt = table_ratechart.getValueAt(r, c);
                        if (!rt.equals("")) {
                            rate = Double.parseDouble(""+rt);
                        } else {
                            return;
                        }

                        /* ----------------------------------------------------------------------------------------
                        * CALCULATE FOR FAT
                        * ----------------------------------------------------------------------------------------
                        */
                        if(cmbmilktype.getSelectedIndex()==0){
                            qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
                                "FROM slabfat " +
                                "WHERE (((slabfat.from_fat)<"+methods.std_CMFAT+") AND ((slabfat.milktype_id)=1)) " +
                                "ORDER BY slabfat.from_fat DESC;";
                        } else {
                            qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
                                "FROM slabfat " +
                                "WHERE (((slabfat.from_fat)<"+methods.std_BMFAT+") AND ((slabfat.milktype_id)=2)) " +
                                "ORDER BY slabfat.from_fat DESC;";                            
                        }
//                        System.out.println(qry);
                        PreparedStatement selectqry = conn.prepareStatement(qry);
                        ResultSet rsfat = selectqry.executeQuery();
                        while(rsfat.next()) {
//                            System.out.println("Total Record:"+rsfat.getRow());
                            double f_fat = rsfat.getDouble("from_fat");
                            double t_fat = rsfat.getDouble("to_fat");
                            double diff = rsfat.getDouble("diff");
                            torow = (int)Math.round((t_fat - f_fat)*10);
                            int j;
                            for (j=1; j<=torow; j++){
                                rate = rate-diff;
                                r=r-1;
                                table_ratechart.setValueAt(twodf.format(rate), r, c);
                                rowdata[r][c] = Double.parseDouble(""+rate);
                                //System.out.println(rate);
                            }
                        }
                        rsfat.close();
                        selectqry.close();

                        // set rate to standard rate
                        if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                        r = standard_row;
                        if(cmbmilktype.getSelectedIndex()==0){
                            qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
                                "FROM slabfat " +
                                "WHERE (((slabfat.from_fat)>="+methods.std_CMFAT+") AND ((slabfat.milktype_id)=1)) " +
                                "ORDER BY slabfat.from_fat;";
                        } else {
                        qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
                            "FROM slabfat " +
                            "WHERE (((slabfat.from_fat)>="+methods.std_BMFAT+") AND ((slabfat.milktype_id)=2)) " +
                            "ORDER BY slabfat.from_fat;";                            
                        }
                        selectqry = conn.prepareStatement(qry);
                        rsfat = selectqry.executeQuery();
                        while(rsfat.next()) {
                            double f_fat = rsfat.getDouble("from_fat");
                            double t_fat = rsfat.getDouble("to_fat");
                            double diff = rsfat.getDouble("diff");
                            torow = (int)Math.round((t_fat - f_fat)*10);
                            //System.out.println("2nd loop : "+torow);
                            int j;
                            for (j=1; j<=torow; j++){
                                rate = rate+diff;
                                r=r+1;
                                table_ratechart.setValueAt(twodf.format(rate), r, c);
                                rowdata[r][c] = Double.parseDouble(""+rate);
                                //System.out.println(rate);
                            }
                        }
                        rsfat.close();
                        selectqry.close();
                        /* ----------------------------------------------------------------------------------------
                        * END CALCULATE FOR FAT
                        * ----------------------------------------------------------------------------------------
                        */    
                        /* ----------------------------------------------------------------------------------------
                         * CALCULATE FOR SNF
                         * ----------------------------------------------------------------------------------------
                         */
                        switch (methods.ratechartcalcbase_CM) {
                            case "FAT-SNF":
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)<"+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                } else {
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)<"+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                }
                                Statement stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                int j;
                                for (j=0; j<table_ratechart.getRowCount(); j++){
                                    rt = table_ratechart.getValueAt(j, standard_col);
                                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                    c = standard_col - 1;
                                    int k;
                                    while(rsfat.next()) {
                                        double f_snf = rsfat.getDouble("from_snf");
                                        double t_snf = rsfat.getDouble("to_snf");
                                        double diff = rsfat.getDouble("diff");

                                        tocol = (int)Math.round((t_snf - f_snf)*10);

                                        for(k=1;k<=tocol;k++){
                                            rate = rate - diff;
                                            //System.out.println(rate);
                                            table_ratechart.setValueAt(twodf.format(rate), j, c);
                                            rowdata[j][c] = Double.parseDouble(""+rate);
                                            c = c - 1;
                                        }
                                    }
                                    rsfat.beforeFirst();
                                }
                                rsfat.close();
                                stmn.close();
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)>="+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
                                        "ORDER BY slabsnf.from_snf;";
                                } else {
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)>="+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
                                        "ORDER BY slabsnf.from_snf;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                for (j=0; j<table_ratechart.getRowCount(); j++){
                                    rt = table_ratechart.getValueAt(j, standard_col);
                                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                    c = standard_col + 1;
                                    int k;
                                    while(rsfat.next()) {
                                        double f_snf = rsfat.getDouble("from_snf");
                                        double t_snf = rsfat.getDouble("to_snf");
                                        double diff = rsfat.getDouble("diff");

                                        tocol = (int)Math.round((t_snf - f_snf)*10);
//                                        System.out.println(tocol);
                                        for(k=1;k<=tocol;k++){
                                            rate = rate + diff;
//                                            System.out.println(rate);
                                            table_ratechart.setValueAt(twodf.format(rate), j, c);
                                            rowdata[j][c] = Double.parseDouble(""+rate);
                                            c = c + 1;
                                        }
//                                        System.out.println("Out of inner for loop");
                                    }
//                                    System.out.println("Out of while loop");
                                    rsfat.beforeFirst();
                                }
                                rsfat.close();
                                stmn.close();

                               /* ----------------------------------------------------------------------------------------
                                * END CALCULATE FOR SNF
                                * ----------------------------------------------------------------------------------------
                                */
                                break;
                            case "FAT-CLR":
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)<"+methods.std_CMCLR+") AND ((slabclr.milktype_id)=1)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                } else {
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)<"+methods.std_BMCLR+") AND ((slabclr.milktype_id)=2)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                //int j;
                                for (j=0; j<table_ratechart.getRowCount(); j++){
                                    rt = table_ratechart.getValueAt(j, standard_col);
                                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                    c = standard_col - 1;
                                    int k;
                                    while(rsfat.next()) {
                                        double f_clr = rsfat.getDouble("from_clr");
                                        double t_clr = rsfat.getDouble("to_clr");
                                        double diff = rsfat.getDouble("diff");

                                        tocol = (int)Math.round((t_clr - f_clr)*2);
//                                        System.out.println("tocol : "+tocol);
                                        for(k=1;k<=tocol;k++){
                                            rate = rate - diff;
//                                            System.out.println("Rate : "+rate);
//                                            System.out.println("J : "+j);
//                                            System.out.println("C : "+c);
                                            table_ratechart.setValueAt(twodf.format(rate), j, c);
                                            rowdata[j][c] = Double.parseDouble(""+rate);
                                            c = c - 1;
                                        }
                                    }
                                    rsfat.beforeFirst();
                                }
                                rsfat.close(); 
                                stmn.close();

                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)>="+methods.std_CMCLR+") AND ((slabclr.milktype_id)=1)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                } else {
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)>="+methods.std_BMCLR+") AND ((slabclr.milktype_id)=2)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                for (j=0; j<table_ratechart.getRowCount(); j++){
                                    rt = table_ratechart.getValueAt(j, standard_col);
                                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                    c = standard_col + 1;
                                    int k;
                                    while(rsfat.next()) {
                                        double f_clr = rsfat.getDouble("from_clr");
                                        double t_clr = rsfat.getDouble("to_clr");
                                        double diff = rsfat.getDouble("diff");

                                        tocol = (int)Math.round((t_clr - f_clr)*2);
                                        //System.out.println(tocol);
                                        for(k=1;k<=tocol;k++){
                                            rate = rate + diff;
//                                            System.out.println(rate);
                                            table_ratechart.setValueAt(twodf.format(rate), j, c);
                                            rowdata[j][c] = Double.parseDouble(""+rate);
                                            c = c + 1;
                                        }
                                        //System.out.println("Out of inner for loop");
                                    }
                                    //System.out.println("Out of while loop");
                                    rsfat.beforeFirst();
                                }
                                rsfat.close(); 
                                stmn.close();

                               /* ----------------------------------------------------------------------------------------
                                * END CALCULATE FOR SNF
                                * ----------------------------------------------------------------------------------------
                                */                            
                                break;
                        }
                        conn.close();
                    } catch(SQLException | NumberFormatException | StringIndexOutOfBoundsException ee) {

                        JOptionPane.showMessageDialog(null, ee);
                        JOptionPane.showMessageDialog(null, ee.getStackTrace());
                        System.out.println(ee.getStackTrace());

                    }            

                }
            } else { // Calculation type is Full column
                System.out.println("In full column");
                if(c==standard_col) {
                    System.out.println(c);
                    
                    try {        
                        if(conn!=null) {
                            conn.close();
                        }
                        conn = methods.getConnection();            
                        ResultSet rsfat;
                        Object rt = table_ratechart.getValueAt(table_ratechart.getSelectedRow(), c);
                        System.out.println("Befor If");
                        if (!rt.equals("")) {
                            rate = Double.parseDouble(""+rt);
                            System.out.println(rate);
                        } else {
                            return;
                        }
                        System.out.println(rate);
                        System.out.println(methods.ratechartcalcbase_CM);
                        switch (methods.ratechartcalcbase_CM) {
                            case "FAT-SNF":
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)<"+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                } else {
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)<"+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                }
                                System.out.println(qry);
                                Statement stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                int j;
                                j = table_ratechart.getSelectedRow();
                                //for (j=0; j<table_ratechart.getRowCount(); j++){
                                rt = table_ratechart.getValueAt(j, standard_col);
                                if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                c = standard_col - 1;
                                System.out.println(c);
                                int k;
                                while(rsfat.next()) {
                                    double f_snf = rsfat.getDouble("from_snf");
                                    double t_snf = rsfat.getDouble("to_snf");
                                    double diff = rsfat.getDouble("diff");

                                    tocol = (int)Math.round((t_snf - f_snf)*10);

                                    for(k=1;k<=tocol;k++){
                                        rate = rate - diff;
                                        //System.out.println(rate);
                                        table_ratechart.setValueAt(twodf.format(rate), j, c);
                                        c = c - 1;
                                    }
                                }
                                rsfat.close();
                                stmn.close();
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)>="+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                } else {
                                    qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
                                        "FROM slabsnf " +
                                        "WHERE (((slabsnf.from_snf)>="+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
                                        "ORDER BY slabsnf.from_snf DESC;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                j = table_ratechart.getSelectedRow();
                                //for (j=0; j<table_ratechart.getRowCount(); j++){
                                rt = table_ratechart.getValueAt(j, standard_col);
                                if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                c = standard_col + 1;
                                while(rsfat.next()) {
                                    double f_snf = rsfat.getDouble("from_snf");
                                    double t_snf = rsfat.getDouble("to_snf");
                                    double diff = rsfat.getDouble("diff");

                                    tocol = (int)Math.round((t_snf - f_snf)*10);

                                    for(k=1;k<=tocol;k++){
                                        rate = rate + diff;
                                        //System.out.println(rate);
                                        table_ratechart.setValueAt(twodf.format(rate), j, c);
                                        c = c + 1;
                                    }
                                }
                                rsfat.close();
                                stmn.close();
                                break;
                            case "FAT-CLR":
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)<"+methods.std_CMCLR+") AND ((slabclr.milktype_id)=1)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                } else {
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)<"+methods.std_BMCLR+") AND ((slabclr.milktype_id)=2)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                
                                j = table_ratechart.getSelectedRow();
                                //for (j=0; j<table_ratechart.getRowCount(); j++){
                                rt = table_ratechart.getValueAt(j, standard_col);
                                if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                c = standard_col - 1;
                                //int k;
                                while(rsfat.next()) {
                                    double f_clr = rsfat.getDouble("from_clr");
                                    double t_clr = rsfat.getDouble("to_clr");
                                    double diff = rsfat.getDouble("diff");

                                    tocol = (int)Math.round((t_clr - f_clr)*2);

                                    for(k=1;k<=tocol;k++){
                                        rate = rate - diff;
                                        //System.out.println(rate);
                                        table_ratechart.setValueAt(twodf.format(rate), j, c);
                                        c = c - 1;
                                    }
                                }
                                rsfat.close();
                                stmn.close();
                                
                                if(cmbmilktype.getSelectedIndex()==0){
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)>="+methods.std_CMCLR+") AND ((slabclr.milktype_id)=1)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                } else {
                                    qry = "SELECT slabclr.from_clr, slabclr.to_clr, slabclr.diff, slabclr.milktype_id " +
                                        "FROM slabclr " +
                                        "WHERE (((slabclr.from_clr)>="+methods.std_BMCLR+") AND ((slabclr.milktype_id)=2)) " +
                                        "ORDER BY slabclr.from_clr DESC;";
                                }
                                stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                                rsfat = stmn.executeQuery(qry);
                                j = table_ratechart.getSelectedRow();
                                //for (j=0; j<table_ratechart.getRowCount(); j++){
                                rt = table_ratechart.getValueAt(j, standard_col);
                                if (!rt.equals("")) rate = Double.parseDouble(""+rt);
                                c = standard_col + 1;
                                while(rsfat.next()) {
                                    double f_clr = rsfat.getDouble("from_clr");
                                    double t_clr = rsfat.getDouble("to_clr");
                                    double diff = rsfat.getDouble("diff");

                                    tocol = (int)Math.round((t_clr - f_clr)*2);

                                    for(k=1;k<=tocol;k++){
                                        rate = rate + diff;
                                        //System.out.println(rate);
                                        table_ratechart.setValueAt(twodf.format(rate), j, c);
                                        c = c + 1;
                                    }
                                }
                                rsfat.close();
                                stmn.close();

                                break;
                            
                        }
                    } catch(SQLException | NumberFormatException | StringIndexOutOfBoundsException ee) {

                        JOptionPane.showMessageDialog(null, ee);
                        JOptionPane.showMessageDialog(null, ee.getStackTrace());
                        System.out.println(ee.getStackTrace());

                    }                    
                }
            }
        } else {
            //System.out.println("In Key Release Event else loop");
        }
    }//GEN-LAST:event_table_ratechartKeyReleased

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        displayrecord(4);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        displayrecord(3);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        displayrecord(2);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        displayrecord(1);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        displayrecord(5);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cmbmilktypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbmilktypeActionPerformed
    }//GEN-LAST:event_cmbmilktypeActionPerformed

    private void optstandardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optstandardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optstandardActionPerformed

    private void jScrollPane2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jScrollPane2FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2FocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbmilktype;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton optfullcolumn;
    private javax.swing.JRadioButton optstandard;
    private javax.swing.JTable table_ratechart;
    private javax.swing.JTable table_rowheader;
    private javax.swing.JFormattedTextField txtFromTime;
    private javax.swing.JFormattedTextField txtToTime;
    private javax.swing.JTextField txtratechartno;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        
        //if(e.)
//        if(framestate!=3) {
//        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        int r = e.getFirstRow();
//        int c = e.getColumn();
//        Double rate;
//        int torow;
//        int tocol;
//        String qry;
//        //System.out.println("Current column  : "+c);
//        //System.out.println("Current Row     : "+r);
//        //System.out.println(standard_col);
//        //System.out.println(standard_row);
//            
//        if(optstandard.isSelected()) {
//            if(r == standard_row && c == standard_col) { //if standard rate is inserted
//                //System.out.println("Am here.!");
//                try {        
//                    if(conn!=null) {
//                        conn.close();
//                    }
//                    conn = methods.getConnection();            
//                    Object rt = table_ratechart.getValueAt(r, c);
//                    if (!rt.equals("")) {
//                        rate = Double.parseDouble(""+rt);
//                    } else {
//                        return;
//                    }
//
//                    /* ----------------------------------------------------------------------------------------
//                    * CALCULATE FOR FAT
//                    * ----------------------------------------------------------------------------------------
//                    */
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
//                            "FROM slabfat " +
//                            "WHERE (((slabfat.from_fat)<"+methods.std_CMFAT+") AND ((slabfat.milktype_id)=1)) " +
//                            "ORDER BY slabfat.from_fat DESC;";
//                    } else {
//                        qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
//                            "FROM slabfat " +
//                            "WHERE (((slabfat.from_fat)<"+methods.std_BMFAT+") AND ((slabfat.milktype_id)=2)) " +
//                            "ORDER BY slabfat.from_fat DESC;";                            
//                    }
//                    System.out.println(qry);
//                    PreparedStatement selectqry = conn.prepareStatement(qry);
//                    ResultSet rsfat = selectqry.executeQuery();
//                    while(rsfat.next()) {
//                        System.out.println("Total Record:"+rsfat.getRow());
//                        double f_fat = rsfat.getDouble("from_fat");
//                        double t_fat = rsfat.getDouble("to_fat");
//                        double diff = rsfat.getDouble("diff");
//                        torow = (int)Math.round((t_fat - f_fat)*10);
//                        int j;
//                        for (j=1; j<=torow; j++){
//                            rate = rate-diff;
//                            r=r-1;
//                            table_ratechart.setValueAt(twodf.format(rate), r, c);
//                            //System.out.println(rate);
//                        }
//                    }
//                    rsfat.close();
//                    selectqry.close();
//
//                    // set rate to standard rate
//                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
//                    r = standard_row;
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
//                            "FROM slabfat " +
//                            "WHERE (((slabfat.from_fat)>="+methods.std_CMFAT+") AND ((slabfat.milktype_id)=1)) " +
//                            "ORDER BY slabfat.from_fat;";
//                    } else {
//                    qry = "SELECT slabfat.from_fat, slabfat.to_fat, slabfat.diff, slabfat.milktype_id " +
//                        "FROM slabfat " +
//                        "WHERE (((slabfat.from_fat)>="+methods.std_BMFAT+") AND ((slabfat.milktype_id)=2)) " +
//                        "ORDER BY slabfat.from_fat;";                            
//                    }
//                    selectqry = conn.prepareStatement(qry);
//                    rsfat = selectqry.executeQuery();
//                    while(rsfat.next()) {
//                        double f_fat = rsfat.getDouble("from_fat");
//                        double t_fat = rsfat.getDouble("to_fat");
//                        double diff = rsfat.getDouble("diff");
//                        torow = (int)Math.round((t_fat - f_fat)*10);
//                        //System.out.println("2nd loop : "+torow);
//                        int j;
//                        for (j=1; j<=torow; j++){
//                            rate = rate+diff;
//                            r=r+1;
//                            table_ratechart.setValueAt(twodf.format(rate), r, c);
//                            //System.out.println(rate);
//                        }
//                    }
//                    rsfat.close();
//                    selectqry.close();
//                    /* ----------------------------------------------------------------------------------------
//                    * END CALCULATE FOR FAT
//                    * ----------------------------------------------------------------------------------------
//                    */    
//
//                    /* ----------------------------------------------------------------------------------------
//                    * CALCULATE FOR SNF
//                    * ----------------------------------------------------------------------------------------
//                    */                 
//                    
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)<"+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    } else {
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)<"+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    }
//                    Statement stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    rsfat = stmn.executeQuery(qry);
//                    int j;
//                    for (j=0; j<table_ratechart.getRowCount(); j++){
//                        rt = table_ratechart.getValueAt(j, standard_col);
//                        if (!rt.equals("")) rate = Double.parseDouble(""+rt);
//                        c = standard_col - 1;
//                        int k;
//                        while(rsfat.next()) {
//                            double f_snf = rsfat.getDouble("from_snf");
//                            double t_snf = rsfat.getDouble("to_snf");
//                            double diff = rsfat.getDouble("diff");
//
//                            tocol = (int)Math.round((t_snf - f_snf)*10);
//
//                            for(k=1;k<=tocol;k++){
//                                rate = rate - diff;
//                                //System.out.println(rate);
//                                table_ratechart.setValueAt(twodf.format(rate), j, c);
//                                c = c - 1;
//                            }
//                        }
//                        rsfat.beforeFirst();
//                    }
//                    rsfat.close(); 
//                    stmn.close();
//                
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)>="+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    } else {
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)>="+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    }
//                    stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    rsfat = stmn.executeQuery(qry);
//                    for (j=0; j<table_ratechart.getRowCount(); j++){
//                        rt = table_ratechart.getValueAt(j, standard_col);
//                        if (!rt.equals("")) rate = Double.parseDouble(""+rt);
//                        c = standard_col + 1;
//                        int k;
//                        while(rsfat.next()) {
//                            double f_snf = rsfat.getDouble("from_snf");
//                            double t_snf = rsfat.getDouble("to_snf");
//                            double diff = rsfat.getDouble("diff");
//                            
//                            tocol = (int)Math.round((t_snf - f_snf)*10);
//
//                            for(k=1;k<=tocol;k++){
//                                rate = rate + diff;
//                                //System.out.println(rate);
//                                table_ratechart.setValueAt(twodf.format(rate), j, c);
//                                c = c + 1;
//                            }
//                        }
//                        rsfat.beforeFirst();
//                    }
//                    rsfat.close(); 
//                    stmn.close();
//
//                   /* ----------------------------------------------------------------------------------------
//                    * END CALCULATE FOR FAT
//                    * ----------------------------------------------------------------------------------------
//                    */                        
//
//                    conn.close();
//                } catch(SQLException | NumberFormatException | StringIndexOutOfBoundsException ee) {
//                    
//                    JOptionPane.showMessageDialog(null, ee);
//                    JOptionPane.showMessageDialog(null, ee.getStackTrace());
//                    System.out.println(ee.getStackTrace());
//            
//                }            
//            
//            }
//        } else { // Calculation type is Full column
//            if(c==standard_col) {
//                try {        
//                    if(conn!=null) {
//                        conn.close();
//                    }
//                    conn = methods.getConnection();            
//                    ResultSet rsfat;
//                    Object rt = table_ratechart.getValueAt(table_ratechart.getSelectedRow(), c);
//                    if (!rt.equals("")) {
//                        rate = Double.parseDouble(""+rt);
//                    } else {
//                        return;
//                    }
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)<"+methods.std_CMSNF+") AND ((slabsnf.milktype_id)=1)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    } else {
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)<"+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    }
//                    Statement stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    rsfat = stmn.executeQuery(qry);
//                    int j;
//                    j = table_ratechart.getSelectedRow();
//                    //for (j=0; j<table_ratechart.getRowCount(); j++){
//                    rt = table_ratechart.getValueAt(j, standard_col);
//                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
//                    c = standard_col - 1;
//                    int k;
//                    while(rsfat.next()) {
//                        double f_snf = rsfat.getDouble("from_snf");
//                        double t_snf = rsfat.getDouble("to_snf");
//                        double diff = rsfat.getDouble("diff");
//
//                        tocol = (int)Math.round((t_snf - f_snf)*10);
//
//                        for(k=1;k<=tocol;k++){
//                            rate = rate - diff;
//                            //System.out.println(rate);
//                            table_ratechart.setValueAt(twodf.format(rate), j, c);
//                            c = c - 1;
//                        }
//                    }
//                    rsfat.close(); 
//                    stmn.close();
//
//                    if(cmbmilktype.getSelectedIndex()==0){
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)>="+methods.std_CMSNF+") AND ((slabsnf.milkm   type_id)=1)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    } else {
//                        qry = "SELECT slabsnf.from_snf, slabsnf.to_snf, slabsnf.diff, slabsnf.milktype_id " +
//                            "FROM slabsnf " +
//                            "WHERE (((slabsnf.from_snf)>="+methods.std_BMSNF+") AND ((slabsnf.milktype_id)=2)) " +
//                            "ORDER BY slabsnf.from_snf DESC;";
//                    }
//                    stmn = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    rsfat = stmn.executeQuery(qry);
//                    j = table_ratechart.getSelectedRow();
//                    //for (j=0; j<table_ratechart.getRowCount(); j++){
//                    rt = table_ratechart.getValueAt(j, standard_col);
//                    if (!rt.equals("")) rate = Double.parseDouble(""+rt);
//                    c = standard_col + 1;
//                    while(rsfat.next()) {
//                        double f_snf = rsfat.getDouble("from_snf");
//                        double t_snf = rsfat.getDouble("to_snf");
//                        double diff = rsfat.getDouble("diff");
//
//                        tocol = (int)Math.round((t_snf - f_snf)*10);
//
//                        for(k=1;k<=tocol;k++){
//                            rate = rate + diff;
//                            //System.out.println(rate);
//                            table_ratechart.setValueAt(twodf.format(rate), j, c);
//                            c = c + 1;
//                        }
//                    }
//                    rsfat.close(); 
//                    stmn.close();
//                } catch(SQLException | NumberFormatException | StringIndexOutOfBoundsException ee) {
//
//                    JOptionPane.showMessageDialog(null, ee);
//                    JOptionPane.showMessageDialog(null, ee.getStackTrace());
//                    System.out.println(ee.getStackTrace());
//
//                }                    
//            }
//        }
//    }
    }
        
    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String command = e.getActionCommand();
        System.out.println(command);
    }

}

class Synchronizer implements AdjustmentListener
{
    JScrollBar v1, h1, v2, h2;
 
    public Synchronizer(JScrollPane sp1, JScrollPane sp2)
    {
        v1 = sp1.getVerticalScrollBar();
        h1 = sp1.getHorizontalScrollBar();
        v2 = sp2.getVerticalScrollBar();
        h2 = sp2.getHorizontalScrollBar();
    }
 
    @Override
    public void adjustmentValueChanged(AdjustmentEvent e)
    {
        JScrollBar scrollBar = (JScrollBar)e.getSource();
        int value = scrollBar.getValue();
        JScrollBar target = null;
 
        if(scrollBar == v1)
            target = v2;
        if(scrollBar == h1)
            target = h2;
        if(scrollBar == v2)
            target = v1;
        if(scrollBar == h2)
            target = h1;
 
        target.setValue(value);
    }
}